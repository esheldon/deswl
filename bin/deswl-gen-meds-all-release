#!/usr/bin/env python
"""
    %prog [options] medsconf band

Generate shell scripts to run make-meds-input and make-cutouts.

meds_config is a meds config id, e.g. meds001
"""

from __future__ import print_function
import os,sys
import deswl
import desdb



from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option('-b','--bands',default=None,
                  help="bands to do, default all")
parser.add_option('-c','--check',action='store_true',
                  help="check that files exist")
parser.add_option('--vers',default='work',
                  help="Code version, default %default")

parser.add_option('--testbed',action='store_true',
                  help="only write tiles in the testbed")

def cut_blacklist(release, runs):
    nr=len(runs)

    blacklist = deswl.files.get_coadd_blacklist(release)

    runs_new=[]
    for run in runs:
        found=False
        for tile in blacklist:
            if tile in run:
                found=True

        if not found:
            runs_new.append(run)

    nr_new=len(runs_new)
    print('black listed %d/%d' % (nr-nr_new, nr))
    return runs_new

def check_against_testbed(tiles, run):
    keep=False
    for tile in tiles:
        if tile in run:
            keep=True
            break
    return keep

def extract_testbed_runs(runs):
    tiles=deswl.desmeds.testbed.tiles

    keep_runs=[]
    for run in runs:
        if check_against_testbed(tiles, run):
            keep_runs.append(run)

    return keep_runs

def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    medsconf=args[0]
    gen=deswl.desmeds.Generator(medsconf,
                                check=options.check,
                                version=options.vers)
    conf=gen.conf
    if options.bands is not None:
        bands=options.bands.split(',')
        mbands=conf['bands']
        for band in bands:
            if band not in mbands:
                raise ValueError("band '%s' not in meds conf" % band)
    else:
        bands=conf['bands']

    # can be a list
    release=conf['release']

    print('getting run list')
    coadd_runs=desdb.files.get_release_runs(release, withbands=bands)

    if options.testbed:
        truns = extract_testbed_runs(coadd_runs)
        print("kept %d/%d from testbed" % (len(truns),len(coadd_runs)))
        coadd_runs=truns

    #runs=cut_blacklist(release, runs)
    print("not checking blacklist")
    
    nruns=len(coadd_runs)
    ntot = nruns*len(bands)

    itot=0
    for i,coadd_run in enumerate(coadd_runs):
        for band in bands:
            print('-'*70)
            print('%d/%d: %s %s' % (itot+1,ntot,coadd_run,band))

            gen.load_coadd(coadd_run, band)
            gen.write_all()

            itot += 1


main()

