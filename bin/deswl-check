#!/usr/bin/env python
"""
    %prog config_file

Some log messages go to stderr.  The actual data in dict form go to stdout
"""

import sys, os
from sys import stderr, stdout
import copy
import esutil as eu
from esutil.io import fexists
#import deswl

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("-v","--verbose",action='store_true',
                  help="verbose, default %default")
def process_status(info, verbose=False):
    """
    """

    info['error_string'] = ''

    status_file=info['output_files']['status']

    if not fexists(status_file):
        info['error_string'] = 'status file not found'
    else:

        stat_read=False
        try:
            if verbose:
                print >>stderr,'    reading:',status_file
            with open(status_file) as fobj:
                exit_status=int(fobj.read())

            info['exit_status'] = exit_status
        except ValueError as e:
            print >>stderr,"Error reading stat file:",status_file
            info['error_string'] = 'Error reading stat file'

        if stat_read:
            exit_status= info['exit_status']
            if exit_status != 0:
                print >>stderr,"Found non-zero exit status %s in stat file" \
                        % exit_status
                info['error_string'] = 'Processing error'
            else:
                missing=[]
                for ftype,f in info['output_files'].iteritems():
                    if ftype=='qa':
                        continue
                    if verbose:
                        print >>stderr,'    checking:',f
                    if not fexists(f):
                        # only print first missing one
                        if len(missing) == 0:
                            print >>stderr,'file missing:',f
                        missing.append(ftype)

                if len(missing) > 0:
                    fmiss=' '.join(missing)
                    info['error_string'] = 'files missing: %s' % fmiss
    return info

def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    verbose=options.verbose
    fname=args[0]
    if verbose:
        print >>stderr,'reading:',fname
    info={'meta':fname,'error_string':''}

    if not fexists(fname):
        info['error_string'] = 'meta file not found'
    else:
        meta_read = False
        try:
            meta=eu.io.read(fname)
            meta_read = True
            for k,v in meta.iteritems():
                info[k] = v
        except ValueError as e:
            print >>stderr,"Error reading file:",fname
            info['error_string'] = 'Error reading meta file'

        if meta_read:
            info = process_status(info,verbose=verbose)
    
    eu.io.write(stdout, info, type='json')
 

main()
