#!/usr/bin/env python
"""
    %prog [options] run

Generate all the condor job files for the given run.
"""
from __future__ import print_function
import os,sys
import gmix_meds
from gmix_meds.files import CondorMaker
import deswl
import desdb
import yaml


from optparse import OptionParser
parser = OptionParser(__doc__)
parser.add_option("--tilename",default=None,
                  help="only generate for this tilename")
parser.add_option("--missing",action='store_true',
                  help="only write for missing")

def read_gmix_meds_config(config):
    """
    we currently use ones checked into gmix_meds
    """
    path=get_gmix_meds_config_file(config)
    with open(path) as fobj:
        data=yaml.load(fobj)
    return data


def get_gmix_meds_config_file(config):
    """
    we currently use ones checked into gmix_meds
    """
    dir=os.environ['GMIX_MEDS_DIR']
    dir=os.path.join(dir, 'share','config')

    name='%s.yaml' % config

    return os.path.join(dir, name)

def get_coadd_runs(rc):
    dataset=rc['dataset']

    if dataset == "testbed":
        testbed=rc["testbed"]
        print("using testbed:",testbed)
        testbed_name=testbed["name"]

        release=testbed["release"]
        allruns=desdb.files.get_release_runs(release, withbands=rc['withbands'])

        keeptiles=deswl.desmeds.testbeds[testbed_name]

        runs=[]
        for tile in keeptiles:
            for run in allruns:
                if tile in run:
                    runs.append(run)
                    continue

        print("kept %d/%d runs" % (len(runs), len(allruns)))
    else:
        runs=desdb.files.get_release_runs(dataset, withbands=rc['withbands'])
        print("found",len(runs),"runs")


    return runs

def get_meds_files(df, coadd_run, tilename, medsconf, bands):
    slist=[]
    flist=[]

    for band in bands:
        path=df.url('meds',
                    coadd_run=coadd_run,
                    tilename=tilename,
                    band=band,
                    medsconf=medsconf)

        flist.append(path)

        spath=df.url('meds_stats',
                     coadd_run=coadd_run,
                     tilename=tilename,
                     band=band,
                     medsconf=medsconf)
        slist.append(spath)

    return flist, slist

def check_meds(meds_files, stats_files):
    import yaml

    for f,sf in zip(meds_files,stats_files):

        # this is a failure somewhere and we die
        if not os.path.exists(sf):
            raise IOError("stats file is missing: %s" % sf)

        # check that we had some source files
        with open(sf) as fobj:
            stats=yaml.load(sf)

        # note we return right out
        if stats['nsource'] == 0:
            print("no sources were found for meds: %s" % sf)
            return False

        # if we get here, the meds file should exist. So die
        if not os.path.exists(f):
            raise  IOError("error: missing meds file: %s" % f)

    return True

def main():

    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    run=args[0]
    tilename=options.tilename
    missing=options.missing

    runconfig=deswl.files.read_runconfig(run)

    gmconfig_file=get_gmix_meds_config_file(runconfig['config'])

    gmconf=read_gmix_meds_config(runconfig['config'])
    coadd_runs=get_coadd_runs(runconfig)

    df=desdb.files.DESFiles()

    nrun=len(coadd_runs)
    for i,coadd_run in enumerate(coadd_runs):
        print("%d/%d" % (i+1, nrun),coadd_run)

        tilename=coadd_run.split('_')[1]
        meds_files, stats_files=get_meds_files(df,
                                               coadd_run,
                                               tilename,
                                               runconfig['medsconf'],
                                               runconfig['bands'])

        # there are valid reasons to skip certain tiles
        if not check_meds(meds_files, stats_files):
            continue

        maker=CondorMaker(run,
                          gmconfig_file,
                          meds_files,
                          nper=runconfig['nper'],
                          missing=options.missing,
                          sub_dir=tilename)


        maker.write()
main()

