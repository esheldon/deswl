#!/usr/bin/env python
"""
    %prog [options] run

Generate all the job files for the given run.  Also generate a script for
checking the result of each exposure.

Finally, generate a script to reduce the results of the parallelized check
scripts

types
-----
scripts:
    Just write meta files and scripts for every ccd, including checkers
minions:
    Just write out faster stuff
        - minions
            a big mpi job that runs all the ccd scripts
        - check minions 
            runs the checkers
reduce:
    reducer for the checks
"""

import os,sys
from sys import stderr
import deswl
from deswl.generic import MODFAC
import desdb
import esutil as eu


from optparse import OptionParser
parser = OptionParser(__doc__)
parser.add_option("-q","--queue",default='serial', 
                  help="queue for processing %default")
parser.add_option("-t","--types",default='scripts,check,minions,reduce', 
                  help="types to write, default %default")

parser.add_option("-m","--master",action="store_true",
                  help=("write a master script and command list"))

parser.add_option("--tilename",default=None,
                  help="only generate pbs for this tilename")


def write_reducer(run,expected_num):
    text="""# run through the check json files to find problems
# write out the "goodlist" and "badlist" in the collated dir for this run
# $DESDATA/wlpipe/run/collate
from sys import stderr
import glob
import desdb
import esutil as eu

run="{run}"
df=desdb.files.DESFiles()
goodfile=df.url(type='wlpipe_collated_goodlist', run=run)
badfile=df.url(type='wlpipe_collated_badlist', run=run)

files=glob.glob('*/*/*check*json')
if len(files) != {expected_num}:
    raise ValueError("expected {expected_num} files, found %s" % len(files))
goodlist=[]
badlist=[]
nf=len(files)
for i,f in enumerate(files,1):
    if (i % 1000) == 0 or (i == 1):
        print >>stderr,f,"%s/%s" % (i,nf)
    d=eu.io.read(f)
    if d['error_string'] == '':
        goodlist.append(d)
    else:
        if 'output_files' not in d:
            pv=d
        else:
            pv=d['output_files']['stat']
        print >>stderr,pv,'\\n',d['error_string']
        badlist.append(d)
eu.ostools.makedirs_fromfile(goodfile)

print >>stderr,"Found %s/%s problems" % (len(badlist),nf)

print >>stderr,"Writing goodlist:",goodfile
eu.io.write(goodfile,goodlist,clobber=True)
print >>stderr,"Writing badlist:",badfile
eu.io.write(badfile,badlist,clobber=True)\n""".format(run=run,
                                         expected_num=expected_num)

    df=desdb.files.DESFiles()
    f=df.url('wlpipe_check_reduce',
             run=run)
    print >>stderr,"writing check reduce script:",f
    with open(f,'w') as fobj:
        fobj.write(text)



def write_me_checkers(cfobj,queue):
    # every class must have the get_config_data method
    flists=cfobj.get_flists()

    ntot=len(flists)
    modnum=ntot/MODFAC


    print >>stderr,'writing check scripts for',ntot
    for i,fd in enumerate(flists):
        job=deswl.generic.GenericMEChecker(cfobj['run'], 
                                           fd['tilename'],
                                           fd['band'],
                                           start=fd['start'],
                                           end=fd['end'],
                                           queue=queue)

        if i==0 or (i % modnum)==0:
            print >>stderr,'%d/%d %s' % (i+1,ntot,job['check_file'])

        job.write()


def write_se_checkers(cfobj, queue):
    # every class must have the get_config_data method
    print >>stderr,"getting ccd data"
    flists=cfobj.get_flists()

    # number of exposures
    ntot=len(flists)
    modnum=ntot/MODFAC

    print >>stderr,'writing scripts for',ntot,'ccds'
    for i,fd in enumerate(flists):
        expname=fd['expname']
        ccd=fd['ccd']
        job=deswl.generic.GenericSEPBSJob(cfobj['run'], expname, ccd, queue=queue)
        if i==0 or (i % modnum) == 0:
            print >>stderr,'%d/%d %s' % (i+1,ntot,job['check_file'])

        job.write(check=True)


def main():

    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    run=args[0]
    types = options.types.split(',')
    tilename=options.tilename

    rc=deswl.files.Runconfig(run)

    queue=options.queue

    # this is a mess!

    is_se=True
    if rc['run_type'] == 'sse':
        cfobj = deswl.modules.shapelets.ShapeletsSEScripts(run)
    elif rc['run_type'] == 'impyp':
        cfobj = deswl.modules.impyp.ImpypConfig(run, queue=queue)
    elif rc['run_type'] == 'am':
        cfobj = deswl.modules.am.AMConfig(run, queue=queue)
    elif rc['run_type'] == 'i3me':
        is_se=False
        cfobj = deswl.modules.im3shape.I3MEScripts(run)
    elif rc['run_type'] == 'gfme':
        is_se=False
        if 'mcmeds' in rc['config']:
            cfobj = deswl.modules.gmix_mcmc_meds.GMixMCMCMEScripts(run)
        else:
            if options.master:
                cfobj = deswl.modules.gmix_fit_meds.GMixFitMEMaster(run)
            else:
                cfobj = deswl.modules.gmix_fit_meds.GMixFitMEScripts(run)
    elif rc['run_type'] == 'eye_se':
        cfobj = deswl.modules.eyeball.EyeballScripts(run)
    else:
        raise ValueError("unsupported run type: '%s'" % rc['run_type'])

    if options.master:
        if is_se:
            cfobj.write_by_ccd_master()
        else:
            cfobj.write_by_tile_master(tilename=tilename)
    else:

        if 'check' in types:
            if is_se:
                write_se_checkers(cfobj,queue)
            else:
                write_me_checkers(cfobj,queue)

        if 'scripts' in types:
            # write all the config files by ccd

            if is_se:
                cfobj.write_by_ccd()
            else:
                cfobj.write_by_tile(tilename=tilename)

        if 'minions' in types:
            cfobj.write_minions()
            cfobj.write_check_minions()

        if 'reduce' in types:
            print >>stderr,"writing reducer"
            flists=cfobj.get_flists()
            expected_num=len(flists)
            write_reducer(run,expected_num)
main()

