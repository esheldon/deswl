#!/usr/bin/env python
"""
    %prog [options] medsconf coadd_run band

Generate shell script to run make-meds-input and make-cutouts.

meds_config is a meds config id, e.g. meds001
"""

import os,sys
from sys import stderr
import deswl
import desdb

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option('--whose',default='wlpipe',
                  help="Code owner, default %default")
parser.add_option('--vers',default='work',
                  help="Code version, default %default")

_template="""
module unload shapelets-{whose} && module load shapelets-{whose}/{vers}
module unload deswl-{whose} && module load deswl-{whose}/{vers}

coadd_file="{coadd_image}"
coaddcat_file="{coadd_cat}"
coadd_srclist="{meds_srclist}"
cutout_file="{meds_file}"
meds_input="{meds_input}"
medsconf={medsconf}

min_boxsize={min_boxsize}
max_boxsize={max_boxsize}

d=$(dirname "$cutout_file")
mkdir -p "$d"

echo "creating meds input $meds_input"
make-meds-input "$coaddcat_file" $min_boxsize $max_boxsize > "$meds_input"

if [[ $? != "0" ]]; then
    echo "failed to make meds input file"
    exit 1
fi

# entries from medsconf on are just to
# be written into the metadata table; they
# are not used by the code
make-cutouts                         \\
    coadd_file="$coadd_file"         \\
    cat_file="$meds_input"           \\
    coadd_srclist="$coadd_srclist"   \\
    cutout_file="$cutout_file"       \\
    medsconf=$medsconf               \\ 
    coadd_file="$coadd_file"         \\
    coaddcat_file="$coaddcat_file"   \\
    min_boxsize=$min_boxsize         \\
    max_boxsize=$max_boxsize

if [[ $? != "0" ]]; then
    echo "failed to make meds file"
    exit 2
fi
"""

def make_dirs(script_file, meds_file):
    d=os.path.dirname(script_file)
    if not os.path.exists(d):
        print 'making dir:',d
        os.makedirs(d)
    d=os.path.dirname(meds_file)
    if not os.path.exists(d):
        print 'making dir:',d
        os.makedirs(d)

def main():

    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    medsconf=args[0]
    coadd_run=args[1]
    band=args[2]

    conf=deswl.files.read_meds_config(medsconf)

    df=desdb.files.DESFiles()
    cf=desdb.files.Coadd(run=coadd_run,
                         band=band)
    cf.load()

    coadd_image=df.url(type='coadd_image',
                       run=coadd_run,
                       tilename=cf['tilename'],
                       band=band)
    coadd_cat=df.url(type='coadd_cat',
                     run=coadd_run,
                     tilename=cf['tilename'],
                     band=band)

    meds_srclist=df.url(medsconf=medsconf,
                        type='meds_srclist',
                        run=coadd_run,
                        tilename=cf['tilename'],
                        band=band)
    meds_input=df.url(medsconf=medsconf,
                      type='meds_input',
                      run=coadd_run,
                      tilename=cf['tilename'],
                      band=band)

    meds_file=df.url(medsconf=medsconf,
                     type='meds',
                     run=coadd_run,
                     tilename=cf['tilename'],
                     band=band)

    text=_template.format(medsconf=medsconf,
                          vers=options.vers,
                          whose=options.whose,
                          coadd_image=coadd_image,
                          coadd_cat=coadd_cat,
                          meds_input=meds_input,
                          meds_srclist=meds_srclist,
                          min_boxsize=conf['min_boxsize'],
                          max_boxsize=conf['max_boxsize'],
                          meds_file=meds_file)

    script_file=df.url(medsconf=medsconf,
                       type='meds_script',
                       run=coadd_run,
                       tilename=cf['tilename'],
                       band=band)

    make_dirs(script_file, meds_file)
    
    print script_file
    with open(script_file,'w') as fobj:
        fobj.write(text)

main()

