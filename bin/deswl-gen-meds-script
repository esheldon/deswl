#!/usr/bin/env python
"""
    %prog [options] medsconf coadd_run band

Generate shell script to run make-meds-input and make-cutouts.

meds_config is a meds config id, e.g. meds001
"""

import os,sys
from sys import stderr
import deswl
import desdb

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option('--vers',default='work',
                  help="Code version, default %default")

_template="""#!/bin/bash
# we write stdout from make-meds-input to the meds_input file; log messages
# go to stderr
#
# make-cutouts only writes to stderr
#
# the exit status from those programs (the last to run) is written to the
# meds_status file and becomes the exit status of this program.
#
# there should be no stdout from this script, only stderr
#
# in production this script is called by a pbs submit script and the
# stderr is written to a log file (meds_log)

module unload shapelets && module load shapelets/{vers}
module unload meds && module load meds/{vers}

magzp_ref={magzp_ref}
coadd_file="{coadd_image}"
coaddseg_file="{coadd_seg}"
coaddcat_file="{coadd_cat}"
coadd_srclist="{meds_srclist}"
cutout_file_uc="{meds_file_uc}"
cutout_file_fz="{meds_file_fz}"
meds_input="{meds_input}"
medsconf={medsconf}
meds_status="{meds_status}"

min_boxsize={min_boxsize}
max_boxsize={max_boxsize}

d=$(dirname "$cutout_file_uc")
mkdir -p "$d"

if [[ -e "$cutout_file_fz" ]]; then
    rm -v "$cutout_file_fz"
fi

echo "creating meds input $meds_input"
make-meds-input "$coaddcat_file" $min_boxsize $max_boxsize > "$meds_input"

exit_status=$?
if [[ $? == "0" ]]; then

    # keywords after cutout_file= are just extra medatdata to be written into
    # the metadata table; they are not used by the code

    cmd="
    make-cutouts
        magzp_ref=$magzp_ref
        coadd_file=$coadd_file
        coaddseg_file=$coaddseg_file
        cat_file=$meds_input
        coadd_srclist=$coadd_srclist
        cutout_file=$cutout_file_uc
        medsconf=$medsconf
        coaddcat_file=$coaddcat_file
        min_boxsize=$min_boxsize
        max_boxsize=$max_boxsize
    "

    $cmd

    exit_status=$?
    if [[ $exit_status == "0" ]]; then
        echo "fpacking to $cutout_file_fz"
        fpack -t {fpack_dim0},{fpack_dim1} "$cutout_file_uc" 
        exit_status=$?
        if [[ $exit_status == "0" ]]; then
            if [[ ! -e "$cutout_file_fz" ]]; then
                echo "compressed cutout file not made $cutout_file_fz"
                echo "leaving uncompressed file in place"
                exit_status=1
            else
                # only remove uncompressed file if all went well
                rm -v "$cutout_file_uc"
            fi
        else
            echo "leaving uncompressed file in place"
        fi
    fi
fi

mess="writing status $exit_status to meds_status:
    $meds_status"
echo $mess

echo "exit_status: $exit_status" > "$meds_status"
exit $exit_status
"""

def make_dirs(script_file, meds_file):
    d=os.path.dirname(script_file)
    if not os.path.exists(d):
        print 'making dir:',d
        os.makedirs(d)
    d=os.path.dirname(meds_file)
    if not os.path.exists(d):
        print 'making dir:',d
        os.makedirs(d)

def main():

    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    medsconf=args[0]
    coadd_run=args[1]
    band=args[2]

    conf=deswl.files.read_meds_config(medsconf)

    df=desdb.files.DESFiles()
    cf=desdb.files.Coadd(coadd_run=coadd_run, band=band)
    cf.load()

    detband=conf['detband']

    magzp_ref = desdb.files.get_release_magzp_ref(conf['release'], band)

    coadd_image=df.url(type='coadd_image',
                       coadd_run=coadd_run,
                       tilename=cf['tilename'],
                       band=band)

    coadd_seg=df.url(type='coadd_seg',
                     coadd_run=coadd_run,
                     tilename=cf['tilename'],
                     band=band)

    coadd_cat=df.url(type='coadd_cat',
                     coadd_run=coadd_run,
                     tilename=cf['tilename'],
                     band=detband)

    meds_srclist=df.url(medsconf=medsconf,
                        type='meds_srclist',
                        coadd_run=coadd_run,
                        tilename=cf['tilename'],
                        band=band)
    meds_input=df.url(medsconf=medsconf,
                      type='meds_input',
                      coadd_run=coadd_run,
                      tilename=cf['tilename'],
                      band=band)

    meds_file_fz=df.url(medsconf=medsconf,
                        type='meds',
                        coadd_run=coadd_run,
                        tilename=cf['tilename'],
                        band=band)
    meds_file_uc = meds_file_fz.replace('.fz','')
    meds_status=df.url(medsconf=medsconf,
                       type='meds_status',
                       coadd_run=coadd_run,
                       tilename=cf['tilename'],
                       band=band)


    text=_template.format(medsconf=medsconf,
                          magzp_ref=magzp_ref,
                          vers=options.vers,
                          coadd_image=coadd_image,
                          coadd_seg=coadd_seg,
                          coadd_cat=coadd_cat,
                          meds_input=meds_input,
                          meds_srclist=meds_srclist,
                          min_boxsize=conf['min_boxsize'],
                          max_boxsize=conf['max_boxsize'],
                          meds_file_uc=meds_file_uc,
                          meds_file_fz=meds_file_fz,
                          meds_status=meds_status,
                          fpack_dim0=conf['fpack_dims'][0],
                          fpack_dim1=conf['fpack_dims'][1])

    script_file=df.url(medsconf=medsconf,
                       type='meds_script',
                       coadd_run=coadd_run,
                       tilename=cf['tilename'],
                       band=band)

    make_dirs(script_file, meds_file_uc)
    
    print script_file
    with open(script_file,'w') as fobj:
        fobj.write(text)

main()

